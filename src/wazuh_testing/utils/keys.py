import hashlib

from typing import List

from wazuh_testing.constants.paths.configurations import BASE_CONF_PATH
from wazuh_testing.utils.file import exists_and_is_file, read_file_lines


def create_encryption_key(agent_id: str, name: str, key: str) -> bytes:
    """Generate an encryption key using agent metadata and a key.

    The encryption key is generated by combining the MD5 hashes of the agent name,
    agent ID, and the provided key.

    Args:
        agent_id (str): The ID of the agent.
        name (str): The name of the agent.
        key (str): The encryption key.

    Returns:
        bytes: The generated encryption key as bytes.
    """
    first_hash = (hashlib.md5(hashlib.md5(name.encode()).hexdigest().encode() +
                              hashlib.md5(agent_id.encode()).hexdigest().encode()
                              ).hexdigest().encode())[:15]
    second_hash = hashlib.md5(key.encode()).hexdigest().encode()

    return second_hash + first_hash


def get_client_keys(path: str = f'{BASE_CONF_PATH}/client.keys') -> List[dict]:
    """Get client keys from a file.

    Args:
        path (str, optional): Path to the file containing the client keys.
            Defaults to f'{BASE_CONF_PATH}/client.keys'.

    Returns:
        List[dict]: A list of dictionaries representing the client keys.
            Each dictionary contains the following keys: 'id', 'name', 'ip', and 'key'.
    """
    if not exists_and_is_file(path):
        return [{'id': 100, 'name': 'ubuntu-agent', 'ip': 'any', 'key': 'TopSecret'}]

    keys = []
    for line in read_file_lines(path):
        (id, name, ip, key) = line.split(' ')
        keys.append({'id': id, 'name': name, 'ip': ip, 'key': key})

    return keys
